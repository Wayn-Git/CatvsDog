# -*- coding: utf-8 -*-
"""catDog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sJ6Bo6stQmfeLm8Jl2uN5gbvuFenFkYD
"""

!git clone https://github.com/Wayn-Git/CatvsDog

# Commented out IPython magic to ensure Python compatibility.
# %cd CatvsDog

"""# Importing Libraries"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, BatchNormalization, Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import seaborn as sns

train_dir = "/content/CatvsDog/Data/train"
test_dir = "/content/CatvsDog/Data/test"

trainGen = ImageDataGenerator(rescale=1./255, horizontal_flip=True, zoom_range=0.2, width_shift_range=0.1, height_shift_range=0.1)
testGen = ImageDataGenerator(rescale=1./255)


train_gen = trainGen.flow_from_directory(train_dir, target_size=(224, 224), batch_size=32, class_mode="binary")
test_gen = testGen.flow_from_directory(test_dir, batch_size=3 , target_size=(224, 224), class_mode="binary")

print("Training samples:", train_gen.samples)
print("Test samples:", test_gen.samples)
print("Class indices:", train_gen.class_indices)

model = models.Sequential([
    layers.Input(shape=(224,224,3)),


    Conv2D(32 , (3,3), activation='relu', padding='same'),
    BatchNormalization(),
    Dropout(0.25),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu', padding='same'),
    BatchNormalization(),
    Dropout(0.25),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation = 'relu', padding='same'),
    BatchNormalization(),
    Dropout(0.25),
    MaxPooling2D(2,2),

    Conv2D(256, (3,3), activation='relu', padding='same'),
    BatchNormalization(),
    Dropout(0.25),
    MaxPooling2D(2,2),



    Flatten(),

    Dense(128, activation='relu'),
    BatchNormalization(),
    Dropout(0.5),
    Dense(1, activation='sigmoid')

])

model.compile(optimizer='adam', metrics=['accuracy'], loss='binary_crossentropy')

model.summary()

history = model.fit(train_gen,
                    epochs=50,
                    validation_data=test_gen,
                    verbose=1,
                    steps_per_epoch=train_gen.samples // train_gen.batch_size,
                    validation_steps=test_gen.samples // test_gen.batch_size)

test_loss, test_accuracy = model.evaluate(test_gen)
print(f"Test Accuracy: {test_accuracy:.4f}")
print(f"Test Loss: {test_loss:.4f}")

import matplotlib.pyplot as plt


plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid()
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid()
plt.show()

import os
os.makedirs("model", exist_ok=True)

model.save("model/cat_dog_model.keras")

from tensorflow.keras.preprocessing import image
import numpy as np

img_path = "/content/CatvsDog/Data/test/cats/cat.4001.jpg"
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

prediction = model.predict(img_array)

if prediction[0][0] > 0.5:
    print("Predicted: Dog 🐶")
else:
    print("Predicted: Cat 🐱")